#!/usr/bin/python
# -*- coding: UTF-8 -*-

'''
try:
	<语句>        #运行别的代码
except <name>：
	<语句>        #如果在try部份引发了'name'异常
except <name>，<数据>:
	<语句>        #如果引发了'name'异常，获得附加的数据
else:
	<语句>        #如果没有异常发生
	
	
try:
	<语句>
finally:
	<语句>    #退出try时总会执行
raise
'''
try:
    1 / 0
except Exception as e:
    '''异常的父类，可以捕获所有的异常'''
    print "0不能被除"
else:
    '''保护不抛出异常的代码'''
    print "没有异常"
finally:
    print "最后总是要执行我"
	

try:
    fh = open("testfile", "r")	
    try:
        fh.write("这是一个测试文件，用于测试异常!!")
    finally:
        print "关闭文件"
        fh.close()
except IOError:
    print "Error: 没有找到文件或读取文件失败"
else:
    print "内容写入文件成功"
    fh.close()
'''
若testfile存在时：
 当文件是"r"时，出现异常，结果为：关闭文件   Error: 没有找到文件或读取文件失败  
 当文件是"w"时，没有出现异常，结果为：关闭文件   内容写入文件成功 
综上：try和finally的语句都会运行，excpet对应异常才会运行，else没有异常运行

若testfile不存在时：
当文件是"r"时，出现异常，结果为：Error: 没有找到文件或读取文件失败  //不会运行try  finally部分
'''


def temp_convert(var):
    try:
        return int(var)
    except ValueError, Argument: #一个异常可以带上参数，可作为输出的异常信息参数
        print "参数没有包含数字\n", ValueError, Argument

temp_convert("xyz");


'''
一个异常可以是一个字符串，类或对象,我们可以使用raise语句自己触发异常
raise [Exception [, args [, traceback]]]   
'''	
#过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自Exception类。
class Networkerror(RuntimeError):
    def __init__(self, arg):
        self.args = arg
try:
    raise Networkerror("Bad hostname")
except Networkerror,e:
    print e.args